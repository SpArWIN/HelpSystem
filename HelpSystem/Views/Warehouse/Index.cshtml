@model IEnumerable<HelpSystem.Domain.ViewModel.Warehouse.WarehouseViewModel>

@{
    ViewBag.Title = "Склад";
    Layout = "_Layout";
}
<link href="~/css/myanimate.css" rel="stylesheet" />
<style>
    /* Добавляем границу вокруг элемента <ul> с классом nav и nav-pills */
    ul.nav.nav-pills {
      border: 1px solid #ccc;
      border-radius: 5px; /* Для скругления углов */
      padding: 5px; /* Добавляем немного отступа внутри границы */
    }

  


  </style>

<ul  class="nav nav-pills">
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="WarehouseId" role="button" data-bs-toggle="dropdown" aria-expanded="false">Склады</a>
        <ul class="dropdown-menu" aria-labelledby="navBarReferences">
            <li><a class="dropdown-item" id="WarehouseAdd" href="#"  >Добавить склад</a></li>
        </ul>
    </li>
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="FindProductId" role="button" data-bs-toggle="dropdown" aria-expanded="false">Поиск товара</a>
        <ul class="dropdown-menu" aria-labelledby="navBarReferences">
            <li><a class="dropdown-item" id="FindProduct" href="#">Найти товар</a></li>
        </ul>
    </li>
</ul>
@if (Model != null && Model.Any())
{

    //Два цикла вывода организовано для того, чтобы сначала выводились активные склады, а затем в самый конец те, что заморожены
    <div class="row">
        <script>
            var ObjectWh = @Model.Count();
            var FreezeWarehouse = false;
            var NoFreezeNoService = false;
            var FreezeWarehouse = false;
        </script>
        @foreach (var Warehouse in Model)
        {
           

            
            //Если склад не заморожен, отображаем как есть
            if (!Warehouse.isFreesing && !Warehouse.isService)
            {
             
                <div class="col-md-4 mb-6 ">
                    <div class="card user-animation mt-3 whcard">
                    <div class="card-header">
                        <p class="card-title">Склад</p>
                    </div>
                    <div class="card-body">
                        <p style="text-align:center; font-size:20px;" class="card-text">@Warehouse.WarehouseName</p>
                    </div>
                    <div class="card-footer">
                        <div class="row">
                            <p class="text-muted countWh">Количество товара на складе: @Warehouse.TotalCountWarehouse</p>
                        </div>
                            <script>
                                // Записываем общее количество товаров на складе в переменную
                                var WarehouseTotalCount_= @Warehouse.TotalCountWarehouse;
                              
                            </script>


                        <div class="d-grid-gap-2">
                            <div class="row"> 
                                <div class="col-sm-6">
                                        <a style="margin:3px;" class="btn listprod btn-outline-info" data-warehouse-id="@Warehouse.Id">
                                            Список товаров
                                        </a>
                                </div>
                                <div class="col-sm-6">
                                    <a style="margin:3px;" class="btn btn-outline-danger btnmove" onclick="openModal({modalId: 'ModalMove', url:'/Warehouse/GetProductsDetail', data: '@Warehouse.Id' , context: 'MoveProductWarehouse'}) ">Переместить товар</a>
                                </div>
                            </div>
                            <div class="row"> 
                                <div class="col-sm-6">
                                    <a style="margin:3px;" id="BtnChange" class="btn btn-outline-primary" onclick="openModal({ modalId: 'modal', url: '/Warehouse/GetCurrentWarehouse', data: '@Warehouse.Id' , context: 'warehouse' }) ">Изменить</a>
                                </div>
                                <div class="col-sm-6">
                                    <a style="margin:3px;" class="btn btn-outline-primary BtnFreeZing" data-id="@Warehouse.Id" data-name="@Warehouse.WarehouseName">Заморозить склад</a>
                                </div>
                            </div>

                        </div>
                        
                    </div>
                       <script>
                           NoFreezeNoService = true;
                        </script>
                </div>
                </div>
            }
        }
                @foreach(var wh in Model)
                {
                    if (wh.isFreesing)
                    {
                        <div class="col-md-3 mb-3">
                            <div class="card user-animation card-freeze mt-3">
                                <div class="card-header">
                                    <img src="/myIcon/CoolWarehouse.png" width="128" height="128" class="card-img card-img-top" alt="Склад" />
                                    <p style="font-family:'Cascadia Mono'" class="card-title">Склад - @wh.WarehouseName</p>
                                </div>
                                <div class="card-body">
                                    <div class="d-grid gap-2">
                                    <a data-name="@wh.WarehouseName" data-id="@wh.Id" class="btn btn-outline-success BtnUnFreeze">Разморозить склад </a>
                                    </div>
                                </div>
                                <div class="card-footer">
                                <p class="card-text">Количество товаров, оставшихся на складе:@wh.TotalCountWarehouse</p>
                                </div>
                            </div>
                    <script>
                          FreezeWarehouse = true;
                       
                    </script>
                        </div>
                    }
                }

                @* Отображаем сервисный центр отдельно от всех*@
        @foreach(var wh in Model)
        {
            if (wh.isService)
            {
                <div class ="col-md-3 mb-3">
                    <div class="card user-animation card-service mt-3"> 
                        <div class ="card-header " style="display:flex; justify-content:center;" >
                            <img src="/myIcon/ServiceStatic.png" width="100" height="100"  class="card-img-static" />
                            <img src="/myIcon/ServiceWithOutPhone.gif" width="100" height="100" class="card-img-gif" />
                            
                        </div>
                        <div class="card-body">
                            <p class="card-title">@wh.WarehouseName</p>
                             
                        </div>

                        <div class="card-footer">
                            <p class="card-text">Количество утилизированных товаров:@wh.TotalCountWarehouse</p>

                            <div class="d-grid-gap-2">
                                <a data-id="@wh.Id" class="btn btn-outline-warning " id="DetimeId"> Список утилизированных товаров</a>
                                
                            </div>
                        </div>
                    </div>
                    <script>
                        ServiceWarehouse = true;
                        var DebtingTotal = @wh.TotalCountWarehouse;
                    </script>
                </div>
            }
        }

        
            
        

    

    </div>
    
}
else
{
    <p>Список складов пуст</p>
}

<!-- Фоновый затемнитель -->
<div class="frozen-background"></div>

<div class="unfrozen-background "></div>



@section Scripts
{
   
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/2.0.0/js/dataTables.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.full.min.js" integrity="sha512-RtZU3AyMVArmHLiW0suEZ9McadTdegwbgtiQl5Qqo9kunkVg1ofwueXD8/8wv3Af8jkME3DDe3yLfR8HSJfT2g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

    <script>


        $(document).ready(function() {
            $('.user-animation').addClass('show');
            $('#WarehouseAdd').on('click', async function () {
                const { value: WarehouseNmae } = await Swal.fire({
                    title: 'Добавление склада',
                    input: 'text',
                    inputPlaceholder: 'Введите наименование склада ',
                    inputValidator: (value) => {
                        if (!value || value.length < 5) {
                            return 'Минимальная длина наименования - 5 символов!';
                        }
                    }
                });

                if (WarehouseNmae) {
                    CreateWarehouse(WarehouseNmae);
                }
            });
            $('#FindProduct').on('click', function() {
                    $('#FindProducts').modal('show');
                    initialiseFindProduct();

            });

          
           
       
        var PressF1Key = false;
            var GetStap = localStorage.getItem('Warehouse');
        //Список товаров
            $(document).on('click', '.listprod', function (e) {
                e.preventDefault();
                var warehouseId = $(this).data('warehouse-id');
                openModal({
                    modalId: 'DetailWarehouse',
                    url: '/Warehouse/GetProductsWarehouse',
                    data: warehouseId,
                    context: 'ListWarehouse',
                    callback: function () {
                        var Enj = new EnjoyHint({
                            onEnd: function () {
                                setTimeout(function () {
                                    openSecondModal();
                               
                                }, 500);
                                
                            }
                        });
                        var StetList = [];
                        var SetOs = [];
                        if (WarehouseTotalCount_ > 0) {

                            StetList.push(
                                {
                                    'click #productAccordion': 'Здесь отображется список всех товаров на складе',
                                    timeout: 1300,
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },

                                },
                                {
                                    'next .accordion-header': 'Группировка товаров по наименованию,кликните, чтобы раскрыть список',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },

                                },
                                {
                                    'next .accordion-body': 'Здесь отображена основная информация о товаре.',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                },
                                {
                                    'next .dostup': 'Это поле, в котором отображается доступен ли товар для привязки к пользователю',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                },
                                {
                                    'next .deyanya': 'В данном поле отображаются возможные кнопки для манимуляции с товаром',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                },
                                //Это действие для закрепления ModalBindingProduct
                                {
                                    'click #attachBtn': 'Пройдёмся по функционалу привязки',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                   

                                },
                                   
                        
                            );
                        }
                        else {
                            StetList.push(
                                {
                                    'next .modal-body': 'Здесь отображется список всех товаров на складе',
                                    timeout: 1300,
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                    onBeforeStart: function () {
                                        Swal.fire({
                                            title: 'Внимание',
                                            text: 'На этом складе товаров не оказалось, невозможно продемонстрировать остальные подсказки:(',
                                            icon: 'warning',
                                            confirmButtonText: 'Понял'
                                        });
                                    }
                                }
                            )
                        }
                       

                        Enj.set(StetList);
                        Enj.run();

                    }

                });
            });

            function openSecondModal(){
                var Enj = new EnjoyHint({
                    onEnd: function () {
                     
                        setTimeout(function () {
                            Swal.fire({
                                title: 'Внимание',
                                text: 'Аналогичным образом работает списание товаров, комментарий к списанию обязателен.',
                                icon: 'info',
                                confirmButtonText: 'Понял'
                            });
                        
                        }, 500);
                        setTimeout(function(){
                            MoveProductStep();
;                        },500)
                        $('#ModalBindingProduct').modal('hide');
                        $('#BtnBindWarehouse').removeClass('disabled');
                        $('#DetailWarehouse').modal('hide');

                    }

                });
                var Step = [];
                Step.push(
                    {
                        'next #nameProduct': 'Поле в котором отображается наименование товара',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        timeout: 700
                    },
                    {
                        'next #inventoryCode': 'Поле в котором отображается инвентарный код товара',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                    },
                    {
                        'next .select2-selection': 'Здесь необходимо найти нужного пользователя',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        margin: 10
                    },
                    {
                        'next #BindingComent': 'Можно указать необязательный комментарий.',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        margin: 10
                    },
                    {
                        'next #BtnBindWarehouse': 'После всех манипуляций, можно привязывать товар',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        margin: 10,
                        onBeforeStart: function () {
                            Swal.fire({
                                title:'Внимание',
                                text:'В режиме подсказки, привязка товара недоступна',
                                icon:'warning',
                                confirmButtonText:'Понял'
                            });
                            $('#BtnBindWarehouse').addClass('disabled');
                        }
                    }

                );
                Enj.set(Step);
                Enj.run();
            }
          // //Непосредственно шаги по списанию
          //   function DebbitingSteps() {
          //       var Enj = new EnjoyHint({
          //           onEnd: function () {
          //               $('#BtnDebiting').removeClass('disabled');
          //               $('#ModelDebiting').modal('hide');
          //               $('#DetailWarehouse').modal('hide');
          //               setTimeout(function () {
          //                   MoveProductStep();
          //               },  1000);

          //           }

          //       });
          //       var Step = [];
          //       Step.push(

          //           {
          //               'next #DebitNameProduct': 'Здесь отображается наименование списываемого товара',
          //               nextButton: { className: 'btn-success', text: 'Дальше' },
          //               skipButton: { className: 'btn-warning', text: 'Завершить' },
          //               prevButton: { className: 'btn-primary', text: 'Назад' },
          //               margin: 10,
          //           },
          //           {
          //               'next #CodInv': 'Здесь отображается инвентарный код товара',
          //               nextButton: { className: 'btn-success', text: 'Дальше' },
          //               skipButton: { className: 'btn-warning', text: 'Завершить' },
          //               prevButton: { className: 'btn-primary', text: 'Назад' },
          //               margin: 10,
          //           },
          //           {
          //               'next #DegitingCom': 'Здесь необходимо ввести обязательный комментарий',
          //               nextButton: { className: 'btn-success', text: 'Дальше' },
          //               skipButton: { className: 'btn-warning', text: 'Завершить' },
          //               prevButton: { className: 'btn-primary', text: 'Назад' },
          //               margin: 10,
          //           },
          //           {
          //               'next #BtnDebiting': 'Затем необходимо нажать на эту кнопку для списания товара',
          //               nextButton: { className: 'btn-success', text: 'Дальше' },
          //               skipButton: { className: 'btn-warning', text: 'Завершить' },
          //               prevButton: { className: 'btn-primary', text: 'Назад' },
          //               margin: 10,
          //               onBeforeStart: function () {
          //                   Swal.fire({
          //                       title: 'Внимание',
          //                       text: 'В режиме подсказки, списание товара недоступно',
          //                       icon: 'warning',
          //                       confirmButtonText: 'Понял'
          //                   });
          //                   $('#BtnDebiting').addClass('disabled');
          //               }
          //           }
          //       );

          //       Enj.set(Step);
          //       Enj.run();

          //   };
           
           



            //Клик на утилизированный склад
            $(document).on('click', '#DetimeId', function () {
                var warehouseId = $(this).data('id');

                openModal({
                    modalId: 'DetailWarehouse',
                    url: '/Warehouse/GetDebitingProduct',
                    data: warehouseId,
                    context: 'DebitingProduct',
                    callback: function () {
                        // Здесь идет ваш код, который должен выполняться после успешного открытия модального окна
                        var enjoyHintInstance = new EnjoyHint({
                        onEnd:function(){
                                $('#DetailWarehouse').modal('hide');
                                setTimeout(function () {
                                    NoFreezeWarehouse(); //Метод об обычном складе
                                },500)
                                
                        }
                        });

                        var steps = [];

                        if (DebtingTotal < 0) {
                            steps.push(

                                {
                                    'next .modal-body':'Здесь отображаются списанные товары, однако на текущий момент нет списанных товаров, продемонстрировать функционал сейчас невозможно:(',
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                }
                            );
                        }

                         steps.push(
                        
                            {
                                'click .accordion-item': 'Общая информация о списанном товаре.',
                                nextButton: { className: 'btn-success', text: 'Дальше' },
                                skipButton: { className: 'btn-warning', text: 'Завершить' },
                                prevButton: { className: 'btn-primary', text: 'Назад' }
                            },
                            {
                                'next .deb':'Если вдруг случайно списали не тот товар, списание можно отменить',
                                nextButton: { className: 'btn-success', text: 'Дальше' },
                                skipButton: { className: 'btn-warning', text: 'Завершить' },
                                prevButton: { className: 'btn-primary', text: 'Назад' },
                                onBeforeStart: function () {
                                    Swal.fire({
                                        title: 'Внимание',
                                        text: 'Списать товар можно в течение  24 часов, затем кнопка становится недоступной.',
                                        icon: 'info',
                                        confirmButtonText: 'Понял'
                                    });
                                    
                                }
                            }
                    );

                        enjoyHintInstance.set(steps);
                        enjoyHintInstance.run();
                    }
                });
            });



        $('.BtnFreeZing').on('click', function () {
            var warehouseName = $(this).data('name');
            //Разберись с передачей id
            var Id = $(this).data('id'); 
            Swal.fire({
                title: 'Вы действительно хотите заморозить склад ' + warehouseName + '?\n Это приостановит всевозможные поступления и перемещения на него.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Да, заморозить',
                cancelButtonText: 'Отменить заморозку',
                background: " url(/myIcon/FreeZingS.png)",
                color: "#fff",
                
            }).then((result) => {
                if (result.isConfirmed) {
              
                 
                    FreeZing('/Warehouse/FreezeWh', 'Заморозка склада  ', Id);
                   
                }
            });
        });

        //Разморозка склада
        $('.BtnUnFreeze').on('click', function () {
            var WarehouseName = $(this).data('name');
            var Id = $(this).data('id');
            Swal.fire({
                title: 'Вы действительно хотите разморозить склад ' + WarehouseName + '?\n Это возобновит всевозможные поступления и перемещения на него.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Да, разморозить',
                cancelButtonText: 'Отменить разморозку',
                background: " url(/myIcon/Vesna.png)",
                color: "#fff",

            }).then((result) => {
                if (result.isConfirmed) {


                    UnFreezing('/Warehouse/UnFreeze', 'Разморозка склада', Id);

                }
            });


            //Система подсказок
         
        });
        
            function ToolHelp(farcRun = false) {
                if (GetStap === 'false' && !farsRun) {
                    return;
                }

                //Выдаем стандартные подскзаки в любом случае
                var AddWh = new EnjoyHint({});
                var AddStepWh = [];
                AddStepWh.push(

                    {
                        'click #WarehouseId': 'Для того, чтобы добавить новый склад, необходимо перейти в раздел склады',
                        timeout: 1300,
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },


                    },
                    {
                        'next #WarehouseAdd ': 'Добавить новый склад',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        onBeforeStart: function () {
                            Swal.fire({
                                title: 'Внимание',
                                text: 'В режиме подсказки, функция добавления склада будет отключена',
                                icon: 'warning',
                                confirmButtonText: 'Понял'
                            });

                        }

                    },
                    {
                        'next .card-service': 'Так отображается карточка с складом утилизации',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        bottom: 150,
                        margin: 10
                    },
                    {
                        'click #DetimeId': 'Для того, чтобы посмотреть список списанных товаров,необходимо нажать на эту кнопку',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },


                    }


                );

                AddWh.set(AddStepWh);
                AddWh.run();
            }

        ToolHelp();

            function NoFreezeWarehouse(){ //Функция для описание подсказки склада
                if (ObjectWh > 1 && NoFreezeNoService) { //Если кроме сервиса там что то ещё есть, накидываем 
                    var NoFreeze = new EnjoyHint({

                    });
                    var NoFreezeStep = [];
                    NoFreezeStep.push(

                        {
                            'click .listprod': 'Для того, чтобы посмотреть список товаров на складе,необходимо нажать сюда.',
                            nextButton: { className: 'btn-success', text: 'Дальше' },
                            skipButton: { className: 'btn-warning', text: 'Завершить' },
                            prevButton: { className: 'btn-primary', text: 'Назад' },
                        }

                    );
                    NoFreeze.set(NoFreezeStep);
                    NoFreeze.run();
                }
                else {
                    return;
                }
            }

            function MoveProductStep() { //Функция для описание подсказки склада - перемещение
                if (ObjectWh > 1 && NoFreezeNoService) { //Если кроме сервиса там что то ещё есть, накидываем
                    var NoFreeze = new EnjoyHint({
                        onEnd: function () {
                            setTimeout(function () {
                                MoveProductStepbyStep();
                            }, 1000)
                        }
                    });
                    var NoFreezeStep = [];
                    NoFreezeStep.push(
                        {
                            'click .btnmove': 'Для того, чтобы переместить товар с одного  склада на другой, необходимо нажать вот сюда.',
                            nextButton: { className: 'btn-success', text: 'Дальше' },
                            skipButton: { className: 'btn-warning', text: 'Завершить' },
                            prevButton: { className: 'btn-primary', text: 'Назад' },
                        },


                    );
                    NoFreeze.set(NoFreezeStep);
                    NoFreeze.run();
                }
                else {
                    return;
                }
            }

            function MoveProductStepbyStep() {// Непосредственно сами подскази для по перемещению
                var Enjoy = new EnjoyHint({
                    onStart: function () {
                        Swal.fire({
                            title: 'Внимание',
                            text: 'В этом списке отображаются только те товары, которые не закреплены ни за кем.',
                            icon: 'info',
                            confirmButton: 'Понял'
                        });
                    },

                    onEnd: function () {
                        $('.btn-move-product').removeClass('disabled');
                        $('#BtnMassMove').removeClass('disabled');
                        $('#ModalMove').modal('hide');
                    }
                });
                var Step = [];
                Step.push(
                    {
                        'click #accordionExample': 'Общая группировка товаров доступных для перемещения',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        onBeforeStart:function(){
                            $('.btn-move-product').addClass('disabled');
                        }
                    },
                    {
                        'next .produ': 'Основная информация о товаре',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        margin:15

                    },
                    {
                        'next #SelectWarehouse_': 'Для перемещения, необходимо выбрать склад, на который будет перемещён товар',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                    },
                    {
                        'next .btn-move-product': 'Кнопка для перемещения товара',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        onBeforeStart: function () {
                            $('.btn-move-product').addClass('disabled');
                            Swal.fire({
                                title: 'Внимание',
                                text: 'В режиме подсказки, функция перемещения товара  будет отключена.',
                                icon: 'warning',
                                confirmButtonText: 'Понял'
                            });

                        }
                    },
                    {
                        'next .commov': 'Здесь можно указать необязательный комментарий по перемещению товара',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                    },
                    {
                        scrollTo: ' #headingSettings',
                        'click #headingSettings': 'Режим массового перемещения, используется, если есть необходимость перенести 2 и более товаров',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                    },
                    {
                        'click #flexSwitchCheckDefault':'Для перемещение необходимо переключить флажок в активное состояние',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                      shape:'circle',
                      radius:30

                    },
                    {
                        'next .form-check-input': 'В режиме массового перемщения кнопки заменяются на чек-боксы',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        margin:17,
                        timeout:500,
                        onBeforeStart:function(){
                            $('#BtnMassMove').addClass('disabled');
                        }
                    },
                    {
                        'next #SelectMassWarehouse':'Указывается один склад, на который будет перемещаться товар',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        margin: 27,
                        onBeforeStart: function () {
                            Swal.fire({
                                title: 'Внимание',
                                text: 'Замороженнные склады не отображаются в списке для перемещения. ',
                                icon: 'info',
                                confirmButtonText:'Понял'
                            });
                        }

                    },
                    {
                        'next #TextAreas':'Здесь указывается необязательный комментарий',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        onBeforeStart:function(){
                            Swal.fire({
                                title: 'Внимание',
                                text: 'Если выбран склад утилизации, то комментарий при перемещении обязательный!',
                                icon: 'warning',
                                confirmButtonText: 'Понял',

                            });
                        }
                    },
                    {
                        'next #BtnMassMove':'Кнопка для массового перемещения товара',
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                        onBeforeStart: function () {
                            Swal.fire({
                                title: 'Внимание',
                                text: 'Чтобы осуществить перемещение, нужно выбрать больше одного товара.',
                                icon: 'warning',
                                confirmButtonText: 'Понял',

                            });
                        }
                    }


                );
                Enjoy.set(Step);
                Enjoy.run();
            }





    });

            
    </script>
}
