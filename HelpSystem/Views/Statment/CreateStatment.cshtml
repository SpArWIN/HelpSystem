@using HelpSystem.Domain.Enum
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model HelpSystem.Domain.ViewModel.Statment.StatmentViewModel

@{
    ViewBag.Title = "Формирование заявки";
    Layout = "_Layout";
}


<link rel="stylesheet" href="https://cdn.datatables.net/2.0.0/css/dataTables.dataTables.css" />



<style>
    .error-message {
        color: brown;

    }

    .table-container {
        margin-bottom: 30px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        padding: 10px;
    }
    .form-container {
        max-width: 600px;
      
        margin: 30px auto ;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 4, 0, 0.1);
    }

    .form-container {
        opacity: 0;
        filter: blur(2px);
        transform: translateY(-60px);
        transition: all 2s;
    }
    .form-container.show{
            opacity: 1;
            transform: translateY(0);
            filter: blur(0);
    }
</style>
<div class="container">
    <div   class="form-container step-form">
        <form asp-action="CreateStatment" method="post" id="StatForm">
            <div class="form-group">
                <label for="reason">Причина создания:</label>
                <input type="text" id="reason" name="reason" class="form-control" required minlength="10">
                <div class="error-message"></div>
            </div>
            <div class="form-group">
                <label for="description">Подробное описание проблемы:</label>
                <textarea id="description" name="description" class="form-control" style="max-height:160px;" required minlength="20"></textarea>
                <div class="error-message"></div>
            </div>
            <div class="d-grid gap-2" style="margin-top:10px; ">
                <button  id="BtnCreateStatment" class="btn step-form-btn btn-success">Отправить</button>
            </div>
        </form>
    </div>
</div>
<div class="table-container ">
    <table  class="display" id="TaskTableId">
        <thead> 
        <tr>
            <th>Дата создания</th>
            <th>Тема </th>
            <th>Описание</th>
            <th>Статус выполнения</th>
            <th>Результат</th> 
            <th style="display:none">Id</th>
        </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>


@section Scripts
{
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/2.0.0/js/dataTables.js"></script>
    <link href="~/css/status.css" rel="stylesheet" />

    <script>
        $(document).ready(function () {
            $('.form-container').addClass('show');

            $('#StatForm').submit(function (e) {
                e.preventDefault();
                const formData = $(this).serialize();

                Swal.fire({
                    title: 'Запрос..',
                    html: 'Пожалуйста, подождите...',
                    timerProgressBar: true,
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        Swal.close();
                        Swal.fire({
                            title: 'Формирование заявки',
                            text: response.description,
                            icon: 'success',
                            confirmButtonText: 'Окей'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#StatForm')[0].reset(); // Сброс значений полей формы
                            }
                        });
                        data.ajax.reload(); // Обновление данных в таблице
                    },
                    error: function (response) {
                        Swal.close();
                        Swal.fire({
                            title: 'Ошибка формирования заявки',
                            text: response.description,
                            icon: 'error',
                            confirmButtonText: 'Окей'
                        });
                    }
                });
            });

            let data = $('#TaskTableId').DataTable({
                ajax: {
                    url: "@Url.Action("GetUserStatment")",
                    type: "POST",
                    dataSrc: "data",

                },
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.10.25/i18n/Russian.json',
                    emptyTable: "Нет заявок для отображения"
                },
                columns: [
                    { data: "dataCreated", name: "DataCreated" }, // Дата создания
                    { data: "reason", name: "Reason" }, // Причина
                    { data: "description", name: "Description" }, // Описание
                    {
                        data: "status",
                        name: "Status",
                        render: function (data, type, row) {
                            return '<span class="status-' + row.status.toLowerCase().replace(/\s+/g, '-') + '">' + row.status + '</span>';
                        }
                    },
                    {
                        data: "result",
                        name: "Result",
                        sortable: false,
                        render: function (data, type, row) {
                            if (row.status === "На рассмотрении" || row.status === "Рассмотрена") {
                                return "Нет ответа";

                            } else {
                                return '<button class="btn btn-answer btn-success btn-block btn-view" >Посмотреть ответ</button>';
                            }
                        }
                    },
                    { data: "id", name: "Id", visible: false }
                ],



            });




            //Система подсказок
            var StepStatments = [];
            var StatmentsTrigger = localStorage.getItem('StatmetnsTrigger');

            var enjoyUserStart = new EnjoyHint({
                onEnd: function () {

                    if (StatmentsTrigger === 'true' && StatmentsTrigger !== null) {
                        Swal.fire({
                            title: 'Успех',
                            icon: 'success',
                            text: 'Вы успешно прошли обучение в системе HelpDesk!',
                            showConfirmButton: 'Отлично!',

                        }).then((result) => {
                            window.location.href = '/Home/Index';
                        });


                    }

                }
            });
            StepStatments.push(


                {
                    'next .step-form': 'Форма для заполнения заявки, необходимо вписать все поля:)',
                    margin: 25,
                    timeout: 1000,
                    nextButton: { className: 'btn-success', text: 'Дальше' },
                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                    prevButton: { className: 'btn-primary', text: 'Назад' }
                },
                {
                    'next .step-form-btn': 'После заполнения необходимых полей, нажми вот сюда и жди результата',
                    margin: 15,
                    nextButton: { className: 'btn-success', text: 'Дальше' },
                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                    prevButton: { className: 'btn-primary', text: 'Назад' }
                }
            );
            //Если данные в таблице есть, играем :)
           

                StepStatments.push(
                    {
                        'next .table-container': 'В этой таблице,  отражены все ваши заявки, включая их статус.',
                        margin: 15,
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                    prevButton: { className: 'btn-primary', text: 'Назад' }
                    },
                    {
                        'click .btn-answer': 'Если заявка имеет статус:завершена, то можно посмотреть ответ администратора:) ',
                        margin: 15,
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                         skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                    showSkip: false
                    }


                );
            




            //Это если ещё раз захотим пройтись и проверить
            $(document).on('keydown', function (e) {
                if (e.key == "F1") {
                    e.preventDefault();

                    enjoyUserStart.set(StepStatments);
                    enjoyUserStart.run();
                }
            });

            if (StatmentsTrigger !== 'false' && StatmentsTrigger !== null) {

                enjoyUserStart.set(StepStatments);
                enjoyUserStart.run();
                localStorage.removeItem('StatmetnsTrigger');


            }

            //Это для функционала после того, как заявка завершилась
            $('#TaskTableId').on('click', '.btn-view', function () {
                var rowData = data.row($(this).parents('tr')).data();
                openModal({ modalId: 'StateModdal', url: '/Statment/ShowAnswer', data: rowData.id });
            });
        });

      



    </script>

}
