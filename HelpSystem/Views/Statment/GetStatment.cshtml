@using HelpSystem.Domain.Enum
@model dynamic

@{
    ViewBag.Title = "Список заявок";
    Layout = "_Layout";
}

<link rel="stylesheet" href="https://cdn.datatables.net/2.0.0/css/dataTables.dataTables.css" />
<style>
    .table-container {
        margin-bottom: 30px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
     
        padding: 10px;
        max-height: 400px;
        overflow-x: auto;
       
        overflow-y: auto;
    }

    </style>


<div  class="table-container">
    <table class="display" id="GetAllSstatTable">
        <thead>
        <tr>
            <th>Дата создания</th>
            <th>Тема</th>
            <th>От кого</th>
            <th>Статус выполнения</th>
            <th style="display: none;">ID</th>
            <th>Действия</th>
        </tr>
        </thead>
    </table>
</div>



@section Scripts
{
    <script src="https://cdn.datatables.net/2.0.0/js/dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
    <script>
        function BindClick() {
            var hiddenId = $('#hhID').val();
            var productsId = $('#ProductsID').val();
            var Com = $('#Comment').val();
            BindProduct(hiddenId, productsId,Com);
        }

        $(document).ready(function () {
            var GetStap = localStorage.getItem('GetStatments');
            var hasData;
            localStorage.setItem('Invoice', 'false'); //Когда закончим тут, то в режиме подсказок перейдём туда, к накладным
            let Data = $("#GetAllSstatTable").DataTable({
                ajax: {
                    url: "@Url.Action("GetStatmentsData")",
                    type: "POST",
                    dataSrc: "data"
                },
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.10.21/i18n/Russian.json',
                    emptyTable: "Нет заявок для отображения"
                },
                columns: [
                    { data: "dataCreated", name: "DataCreated" },
                    { data: "reason", name: "Reason" },
                    { data: "fullName", name: "FullName" },
                    { data: "status", name: "Status" },
                    { data: "id", name: "Id", visible: false },
                    {
                        data: null,
                        sortable: false,
                        render: function (data, type, row) {
                            return '<button class="btn btn-success btn-block btn-op" ">Ответить</button>';
                        }
                    }
                ],
                initComplete: function (settings, json) {
                    hasData = Data.rows().count() > 0;
                    if (GetStap !== 'false') {
                        setupTooltips(hasData);
                    }
                }
            });


            

       //Подсказки
       //Для проверки, была ли нажата клавиша F1
            var isF1Pressed = false;
            function setupTooltips(hasData, forceRun = false) {

                if (GetStap === 'false' && !forceRun) {
                    return; // Выходим, если GetStap == 'false' и нет принудительного запуска
                }
                var GetStepStatments = [];
                var enjoyUserStart = new EnjoyHint({
                    onEnd: function () {
                        // Если мы в режиме подсказки
                        Swal.fire({
                            title: 'Информация',
                            icon: 'info',
                            text: 'На текущий момент нет заявок от пользователей, невозможно продемонстрировать функционал приложения.',
                            showConfirmButton: 'Хорошо!'
                        }).then((result) => {

                            if (GetStap != 'false') {


                                if (result.isConfirmed) {
                                    window.location.href = '/Home/Index';
                                    localStorage.removeItem('GetStatments');
                                    localStorage.setItem('Invoice', 'true');
                                }
                            }
                        });
                       
                    }
                });

                GetStepStatments.push(
                    {
                        'next .table-container': 'Здесь отображаются все заявки пользователей',
                        margin: 15,
                        timeout: 1300,
                        nextButton: { className: 'btn-success', text: 'Дальше' },
                        skipButton: { className: 'btn-warning', text: 'Завершить' },
                        prevButton: { className: 'btn-primary', text: 'Назад' },
                    }
                );

                if (hasData) {
                    GetStepStatments.push(
                        {
                            'click .btn-success': 'Попробуем ответить на заявку!',
                            margin: 15,
                            nextButton: { className: 'btn-success', text: 'Дальше' },
                            skipButton: { className: 'btn-warning', text: 'Завершить' },
                            prevButton: { className: 'btn-primary', text: 'Назад' },
                        },


                    );

                }
                else {

                }

              
                enjoyUserStart.set(GetStepStatments);
                enjoyUserStart.run();
             

            }

            $(document).on('keydown', function (e) {
                if (e.key == 'F1') {
                    //Если мы просто захотели вспомнить как это делается, пожалуйста
                    e.preventDefault();
                    isF1Pressed = true;
                    setupTooltips(hasData,true);
                }
            });



            // Делегирование события клика
           
            $('#GetAllSstatTable').on('click', '.btn-op', function () {
                var rowData = Data.row($(this).parents('tr')).data();
                openModal({
                    modalId: 'StateModdal',
                    url: '/Statment/GetStatUser',
                    data: rowData.id,
                    callback: function () { // Добавляем callback, чтобы быть уверенным, что модальное окно загружено
                        var newStatus = '@((int)StatusStatement.Reviewed)';
                        UpdateStatus({ data: rowData.id, newStatus: newStatus });


                        if (GetStap !== 'false') {
                            var enjoyUserStart = new EnjoyHint({
                                onEnd: function () {
                                    // Если мы в режиме подсказки
                                    
                                        console.log('Все в заявках');
                                        Swal.fire({
                                            title: 'Информация',
                                            icon: 'info',
                                            text: 'Дальше нужно смотреть в оба глаза!',
                                            showConfirmButton: 'Хорошо!'
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                window.location.href = '/Home/Index';
                                                localStorage.removeItem('GetStatments');
                                                localStorage.setItem('Invoice','true');
                                            }
                                        });

                                    
                                }
                            });
                        }
                        else{

                            
                            var enjoyUserStart = new EnjoyHint({});

                        }
                        if (isF1Pressed || GetStap == 'true') {


                            var GetStepStatments = [];
                            GetStepStatments = [
                                {
                                    'click #BtnBind': 'Попробуем привязать товар?',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                    timeout: 500,
                                },
                                {
                                    'next .select2-selection': 'Тут ищем нужный нам товар',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                },
                                {
                                    'next .step-com1': 'Указать необязательный комментарий по привязке можно тут',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },

                                },
                                {
                                    'next #BdButton ': 'После того, как нашли нужный товар, его можно привязать, нажав эту кнопку',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                },
                                {
                                    'next #AnID': 'И в конце концов, обязательно ответить пользователю на его заявление',
                                    nextButton: { className: 'btn-success', text: 'Дальше' },
                                    skipButton: { className: 'btn-warning', text: 'Завершить' },
                                    prevButton: { className: 'btn-primary', text: 'Назад' },
                                    showNext: false
                                }
                            ];

                        }
                      

                            enjoyUserStart.set(GetStepStatments);
                            enjoyUserStart.run();
                        isF1Pressed = false;
                    }
                });
            });
         
          

          

        });


    </script>
}